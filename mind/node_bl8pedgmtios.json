{"root":{"data":{"id":"bl8pedgmtios","created":1525502203309,"text":"node"},"children":[{"data":{"id":"bl8pfzoe06go","created":1525502330031,"text":"事件"},"children":[{"data":{"id":"bl8pg9qdbfkk","created":1525502351919,"text":"EventEmitter","note":"```// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```"},"children":[{"data":{"id":"bl8pgiupjlkw","created":1525502371772,"text":"1. 来源---所有的异步 I/O 操作在完成时都会发送一个事件到事件队列"},"children":[]},{"data":{"id":"bl8pgiup67ks","created":1525502371772,"text":"+ EventEmitter来自node.js的events模块，该模块只提供一个EventEmitter对象（类）"},"children":[]},{"data":{"id":"bl8pgiuq3p4w","created":1525502371773,"text":"+ 只要是支持事件响应的核心模块都是 EventEmitter 的子类（fs、net、 http ）"},"children":[]},{"data":{"id":"bl8pgiuq4rkg","created":1525502371773,"text":"+ 大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。"},"children":[]}]},{"data":{"id":"bl8pgvsbfgo4","created":1525502399926,"text":"简单示例"},"children":[{"data":{"id":"bl8pgvyffyg4","created":1525502400295,"text":" ","note":"```\n//event.js 文件\nvar EventEmitter = require('events').EventEmitter; \nvar event = new EventEmitter(); \nevent.on('some_event', function() { \n\tconsole.log('some_event 事件触发'); \n}); \nsetTimeout(function() { \n\tevent.emit('some_event'); \n}, 1000); \n```"},"children":[]}]},{"data":{"id":"bl8phuzdi0gs","created":1525502476540,"text":"EventEmitter的方法"},"children":[{"data":{"id":"bl8phv5qzlkw","created":1525502476925,"text":" ","note":"实例的方法与类的方法两类\n\n    1.  实例的方法，调用主体为下面的eventEmitter\n\n```\nvar events = require('events');\nvar eventEmitter = new events.EventEmitter();\n```\n        1. addListener注意是将监听器加到监听器数组的尾部\n\n```\nvar listener1 = function listener1() {\n    console.log('监听器 listener1 执行。');\n}\neventEmitter.addListener('connection', listener1);\n```\n        2. on与addListener类似，但不强调监听器数组的尾部\n        3. once(event, listener)为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器\n        4.未完待续...\n\n    2. 类的方法调用主体为require('events').EventEmitter，即类本身 "},"children":[]}]}]},{"data":{"id":"bl8pj2sdvpc0","created":1525502571896,"text":"分支主题"},"children":[]},{"data":{"id":"bl8pinhrp48o","created":1525502538602,"text":"遍历目录","note":"##  简单实现一个promisify\n\n```\nfunction promisify(fn) {\n  return function() {\n    var args = arguments;\n    return new Promise(function(resolve, reject) {\n      [].push.call(args, function(err, result) {\n        if(err) {\n          reject(err);\n        }else {\n          resolve(result);\n        }\n      });\n      fn.apply(null, args);\n    });\n  }\n}\n```"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.33"}